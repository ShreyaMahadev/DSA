1.sort the array
2.create the subsets


class Solution {
public:
    void backtrack(int index, vector<int>& nums, vector<int>& current, vector<vector<int>>& result) 
{
        result.push_back(current);  // Add the current subset to the result

        for (int i = index; i < nums.size(); i++)  // Loop through elements starting from 'index'
        {
            // Skip duplicates — if the current element is same as the previous one and i > index
            if (i > index && nums[i] == nums[i - 1])
                continue;

            current.push_back(nums[i]);    // Include the current element
            backtrack(i + 1, nums, current, result);

            // Backtrack — remove last added element
            current.pop_back();
        }
    }

    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> current;

        sort(nums.begin(), nums.end());     // Sort to handle duplicates easily

        backtrack(0, nums, current, result);    // Start backtracking

        return result;
    }
};
