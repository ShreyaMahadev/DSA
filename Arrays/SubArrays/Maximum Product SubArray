// prefix → product from left to right
// suffix → product from right to left

class Solution {
public:
    int maxProduct(vector<int>& nums)
    {
        long long prefix=1,suffix=1;
        long long ans=INT_MIN;    // ans stores the maximum product found so far
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            prefix=prefix*nums[i];
            suffix=suffix*nums[n-i-1];
            ans=max(ans,max(prefix,suffix));    //update the answer with the largest product so far
            if(prefix==0)    // if prefix becomes 0, reset it to 1
                prefix=1;
            if(suffix==0)    // reset suffix to 1, when it becomes 0
                suffix=1;
                        
        }
        return ans;
        
    }
}; 

Time Complexity : O(n)
Space Complexity : O(1)
