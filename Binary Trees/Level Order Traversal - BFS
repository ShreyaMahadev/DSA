class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;   // Stores the final level-order 
        if (!root) return result;  

        queue<TreeNode*> q;           // Queue for BFS traversal
        q.push(root);                 // Start with the root node

        while (!q.empty())         // Continue until all nodes are processed
        {
            int size = q.size();      // Number of nodes at the current level
            vector<int> level; // Stores all node values of the current level

            for (int i = 0; i < size; i++)
            {
                TreeNode* node = q.front();  // Get the front node from queue
                q.pop();                     // Remove it from queue
                level.push_back(node->val);// Add its value to current level

                // Add child nodes to the queue for the next level
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }

            result.push_back(level);// Add the current levelâ€™s nodes to the final result
        }

        return result;  // Return all levels
    }
};
