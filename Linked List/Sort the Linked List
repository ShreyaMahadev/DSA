/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    // Merge two sorted lists, return new head & tail
    pair<ListNode*, ListNode*> mergeLists(ListNode* l1, ListNode* l2) {
        ListNode dummy(0);
        ListNode* temp = &dummy;

        while (l1 && l2) {
            if (l1->val <= l2->val) {
                temp->next = l1;
                l1 = l1->next;
            } else {
                temp->next = l2;
                l2 = l2->next;
            }
            temp = temp->next;
        }
        temp->next = l1 ? l1 : l2;

        // Move tail to the end of merged list
        while (temp->next) {
            temp = temp->next;
        }

        return {dummy.next, temp};
    }

    // Split the list into two parts
    ListNode* split(ListNode* head, int size) {
        while (--size && head) {
            head = head->next;
        }
        if (!head) return nullptr;

        ListNode* second = head->next;
        head->next = nullptr;
        return second;
    }

    ListNode* sortList(ListNode* head) {
        if (!head || !head->next) return head;

        // Count length
        int length = 0;
        ListNode* curr = head;
        while (curr) {
            length++;
            curr = curr->next;
        }

        ListNode dummy(0);
        dummy.next = head;

        // Bottom-up merge sort
        for (int step = 1; step < length; step <<= 1) {
            ListNode* prev = &dummy;
            curr = dummy.next;

            while (curr) {
                ListNode* left = curr;
                ListNode* right = split(left, step);
                curr = split(right, step);

                auto merged = mergeLists(left, right);
                prev->next = merged.first;
                prev = merged.second;
            }
        }

        return dummy.next;
    }
};
