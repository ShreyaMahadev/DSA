class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (!head || !head->next) return head; // handle edge cases

        ListNode* odd = head;
        ListNode* even = head->next;
        ListNode* evenhead = even;

        while (even && even->next) {  //even is always in front of odd
            odd->next = even->next;   // link odd to the next odd node
            odd = odd->next;          // move odd forward(traversal)

            even->next = odd->next;   // link even to the next even node
            even = even->next;        // move even forward(traversal)
        }

        odd->next = evenhead; // connect end of odd list to start of even list
        return head;
    }
};
